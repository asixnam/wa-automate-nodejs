"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3371],{4528:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"reference/logging/logging/type-aliases/ConfigLogTransport","title":"Type Alias: ConfigLogTransport","description":"ConfigLogTransport: object","source":"@site/docs/reference/logging/logging/type-aliases/ConfigLogTransport.md","sourceDirName":"reference/logging/logging/type-aliases","slug":"/reference/logging/logging/type-aliases/ConfigLogTransport","permalink":"/docs/reference/logging/logging/type-aliases/ConfigLogTransport","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/logging/logging/type-aliases/ConfigLogTransport.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Function: addRotateFileLogTransport()","permalink":"/docs/reference/logging/logging/functions/addRotateFileLogTransport"},"next":{"title":"Variable: log","permalink":"/docs/reference/logging/logging/variables/log"}}');var s=o(4848),t=o(8453);const i={},l="Type Alias: ConfigLogTransport",c={},d=[{value:"Type declaration",id:"type-declaration",level:2},{value:"done?",id:"done",level:3},{value:"options?",id:"options",level:3},{value:"type",id:"type",level:3}];function a(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"type-alias-configlogtransport",children:"Type Alias: ConfigLogTransport"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ConfigLogTransport"}),": ",(0,s.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,s.jsx)(n.h3,{id:"done",children:"done?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"readonly"})," ",(0,s.jsx)(n.code,{children:"optional"})," ",(0,s.jsx)(n.strong,{children:"done"}),": ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"If the transport has already been added to the logger. The logging set up command handles this for you."}),"\n",(0,s.jsx)(n.h3,{id:"options",children:"options?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"optional"})," ",(0,s.jsx)(n.strong,{children:"options"}),": ",(0,s.jsx)(n.code,{children:"any"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The options for the transport. Generally only required for syslog but you can use this to override default options for other types of transports."}),"\n",(0,s.jsx)(n.h3,{id:"type",children:"type"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"type"}),": ",(0,s.jsx)(n.code,{children:'"syslog"'})," | ",(0,s.jsx)(n.code,{children:'"console"'})," | ",(0,s.jsx)(n.code,{children:'"file"'})," | ",(0,s.jsx)(n.code,{children:'"ev"'})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The type of winston transport. At the moment only ",(0,s.jsx)(n.code,{children:"file"}),", ",(0,s.jsx)(n.code,{children:"console"}),", ",(0,s.jsx)(n.code,{children:"ev"})," and ",(0,s.jsx)(n.code,{children:"syslog"})," are supported."]})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>l});var r=o(6540);const s={},t=r.createContext(s);function i(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);