"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[974],{1236:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"configuration/launch-events","title":"Launch Events","description":"When you call create] there is actually a lot happening in the background and in some use cases, it may be useful to listen to those events. In order to do this you have to use the built in event emitter [ev:","source":"@site/docs/configuration/launch-events.md","sourceDirName":"configuration","slug":"/configuration/launch-events","permalink":"/docs/configuration/launch-events","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/configuration/launch-events.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Capturing the session data","permalink":"/docs/configuration/capture-sd"},"next":{"title":"Licensed Features","permalink":"/docs/configuration/licensed-features"}}');var a=s(4848),o=s(8453);const c={},i="Launch Events",r={},l=[];function d(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"launch-events",children:"Launch Events"})}),"\n",(0,a.jsxs)(n.p,{children:["When you call [create] there is actually a lot happening in the background and in some use cases, it may be useful to listen to those events. In order to do this you have to use the built in event emitter ",(0,a.jsx)(n.a,{href:"/TODO",children:(0,a.jsx)(n.code,{children:"ev"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { ev } from '@open-wa/wa-automate';\n\nev.on('event', callback)\n"})}),"\n",(0,a.jsx)(n.p,{children:"The event you want to listen to is in the format of [namespace].[sessionId]"}),"\n",(0,a.jsx)(n.p,{children:"The event can include wildcards."}),"\n",(0,a.jsxs)(n.p,{children:["For example, to listen to all qr code events, the event will be ",(0,a.jsx)(n.code,{children:"qr.**"}),". e.g:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"ev.on('qr.**',...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Listen to all sessionData events"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"ev.on('sessionData.**',...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Listen to all events from session1"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"ev.on('**.session1',...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Listen to all events"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"ev.on('**.**',...\n"})}),"\n",(0,a.jsx)(n.p,{children:"ev always emits data, sessionId and the namespace which is helpful to know if there are multiple sessions or you're listening to events from all namespaces."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"ev.on('**.**', (data, sessionId, namespace) => {\n\n console.log(`${namespace} event detected for session ${sessionId}`, data)\n\n});\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>i});var t=s(6540);const a={},o=t.createContext(a);function c(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);