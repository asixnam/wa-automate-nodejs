"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7615],{8453:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>c});var n=a(6540);const i={},r=n.createContext(i);function o(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(r.Provider,{value:t},e.children)}},9512:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"how-to/groups","title":"Group","description":"Create a Group","source":"@site/docs/how-to/groups.md","sourceDirName":"how-to","slug":"/how-to/groups","permalink":"/docs/how-to/groups","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/how-to/groups.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Detecting Logouts","permalink":"/docs/how-to/detect-logout"},"next":{"title":"Error Handling","permalink":"/docs/how-to/handle-errors"}}');var i=a(4848),r=a(8453);const o={},c="Group",s={},p=[{value:"Create a Group",id:"create-a-group",level:2},{value:"Managing Participants",id:"managing-participants",level:2},{value:"Listening to participant changes of a specific group",id:"listening-to-participant-changes-of-a-specific-group",level:2},{value:"Listen to participant changes globally",id:"listen-to-participant-changes-globally",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"group",children:"Group"})}),"\n",(0,i.jsx)(t.h2,{id:"create-a-group",children:"Create a Group"}),"\n",(0,i.jsx)(t.p,{children:"Use [[createGroup]] to create a new group, first parameter is the group name, the second parameter is the contact ids to add as participants. There needs to be at least one participant."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"...\n  client.createGroup('Cool new group','xxxxxxxxx@c.us') //you can also send an array of ids.\n...\n"})}),"\n",(0,i.jsx)(t.h2,{id:"managing-participants",children:"Managing Participants"}),"\n",(0,i.jsx)(t.p,{children:"[[addParticipant]] - add a participant\n[[removeParticipant]] -  remove a particpant\n[[promoteParticipant]] - Make a participant admin\n[[demoteParticipant]] -  remove participant as admin"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"...\n  client.addParticipant('XXXXXXX-YYYYYY@c.us','ZZZZZZZZZ@c.us')\n  client.removeParticipant('XXXXXXX-YYYYYY@c.us','ZZZZZZZZZ@c.us')\n  client.promoteParticipant('XXXXXXX-YYYYYY@c.us','ZZZZZZZZZ@c.us')\n  client.demoteParticipant('XXXXXXX-YYYYYY@c.us','ZZZZZZZZZ@c.us')\n...\n"})}),"\n",(0,i.jsx)(t.h2,{id:"listening-to-participant-changes-of-a-specific-group",children:"Listening to participant changes of a specific group"}),"\n",(0,i.jsx)(t.p,{children:"You can react to when participants are added and removed. [[onParticipantsChanged]] emits a [[ParticipantChangedEventModel]]."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"client.onParticipantsChanged(\"XXXXXXXX-YYYYYYYY@g.us\", (participantChangedEvent) => console.log(\"participant changed for group\", participantChangedEvent));\n\n//participantChangedEvent returns\n{\n  by: 'XXXXXXXXXXX@c.us', //who performed the action\n  action: 'remove',\n  who: [ 'XXXXXXXXX@c.us' ] //all the numbers the action effects.\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"This solution can result in some false positives and misfires however a lot of effort has been made to mitigate this to a reasonable level. Best practice is to maintian a seperate registry of participants and go from that."}),"\n",(0,i.jsx)(t.h2,{id:"listen-to-participant-changes-globally",children:"Listen to participant changes globally"}),"\n",(0,i.jsx)(t.p,{children:"[[onGlobalParticipantsChanged]] is a simple and memory efficient way to listen to all participant changes from all groups. This is an Insider's Feature."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"client.onGlobalParticipantsChanged((participantChangedEvent) => console.log(\"participant changed for group\", participantChangedEvent));\n\n//participantChangedEvent returns\n{\n  by: 'XXXXXXXXXXX@c.us', //who performed the action\n  action: 'remove',\n  who: [ 'XXXXXXXXX@c.us' ] //all the numbers the action effects.\n}\n"})})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);