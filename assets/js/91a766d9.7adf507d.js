"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2392],{2459:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"configuration/multiple-sessions","title":"Multiple Sessions","description":"You can run multiple sessions of @open-wa/wa-automate in the same process. This allows you to do interesting things for example:","source":"@site/docs/configuration/multiple-sessions.md","sourceDirName":"configuration","slug":"/configuration/multiple-sessions","permalink":"/docs/configuration/multiple-sessions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/configuration/multiple-sessions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Licensed Features","permalink":"/docs/configuration/licensed-features"},"next":{"title":"Best Practice","permalink":"/docs/advanced/best-practices"}}');var i=s(4848),o=s(8453);const r={},a="Multiple Sessions",c={},l=[{value:"Orchestrating multiple sessions",id:"orchestrating-multiple-sessions",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"multiple-sessions",children:"Multiple Sessions"})}),"\n",(0,i.jsx)(n.p,{children:"You can run multiple sessions of @open-wa/wa-automate in the same process. This allows you to do interesting things for example:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Design and run automated tests for you WA bot."}),"\n",(0,i.jsx)(n.li,{children:"Connect two or more WA numbers to a single (or multiple) message handler(s)"}),"\n",(0,i.jsx)(n.li,{children:"Use one client to make sure another one is alive by pinging it."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Please see demo/index.ts for a working example"}),"\n",(0,i.jsx)(n.p,{children:"NOTE: DO NOT CREATE TWO SESSIONS WITH THE SAME SESSIONID. DO NOT ALLOW SPACES AS SESSION ID."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { create, Client, ev} from '@open-wa/wa-automate';\n\nfunction start(client: Client) {\n  ...\n}\n\ncreate({\n  sessionId:'session'\n}).then(client => start(client));\n\ncreate({\n  sessionId:'another_session'\n}).then(client => start(client));\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can then capture the QR Code for each session using the following event listener code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"//events are fired with the ev namespace then the session Id. e.g \"qr.another_session\"\n//You can however use the wildcard operator with the new event listener and capture the session Id as a parameter instead.\nev.on('qr.**', async (qrcode,sessionId) => {\n  //base64 encoded qr code image\n  const imageBuffer = Buffer.from(qrcode.replace('data:image/png;base64,',''), 'base64');\n  fs.writeFileSync(`qr_code${sessionId?'_'+sessionId:''}.png`, imageBuffer);\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"orchestrating-multiple-sessions",children:"Orchestrating multiple sessions"}),"\n",(0,i.jsx)(n.p,{children:"Client sessions are living breathing objects. They CANNOT be stringified and parsed for later use. If you want to 'hold' multiple sessions in one process, make sure to keep them in memory in a session object registry or array."}),"\n",(0,i.jsxs)(n.p,{children:["For example, let's say you have a ",(0,i.jsx)(n.code,{children:"marketing"})," and ",(0,i.jsx)(n.code,{children:"sales"})," sessions."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"...\n\nconst clientSessionRegistry = {};\n\nasync start(client){\n  //save for later\n  clientSessionRegistry[client.getSessionId()] = client;\n\n  client.onMessage...\n}\n\n//maybe this is called from an API\nsendText(sessionId, params){\n  //grab the existing client from the 'registry'\n  const client = clientSessionRegistry[sessionId];\n\n  //use the client\n  client.sendText(...params);\n}\n\ncreate().then(client => start);\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var t=s(6540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);