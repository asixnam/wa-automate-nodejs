"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9466],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var a=t(6540);const o={},i=a.createContext(o);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(i.Provider,{value:n},e.children)}},8801:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"how-to/react-to-group-events","title":"Reacting To Group Events","description":"For a specific group you can use [[onParticipantsChanged]], this will fire all detectable group participant change events (see: [[ParticipantChangedEventModel]]).","source":"@site/docs/how-to/react-to-group-events.md","sourceDirName":"how-to","slug":"/how-to/react-to-group-events","permalink":"/docs/how-to/react-to-group-events","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/how-to/react-to-group-events.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"More examples","permalink":"/docs/how-to/misc"},"next":{"title":"read-state","permalink":"/docs/how-to/read-state"}}');var o=t(4848),i=t(8453);const r={},s="Reacting To Group Events",c={},l=[{value:"Listening to participant change events from all groups",id:"listening-to-participant-change-events-from-all-groups",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"reacting-to-group-events",children:"Reacting To Group Events"})}),"\n",(0,o.jsx)(n.p,{children:"For a specific group you can use [[onParticipantsChanged]], this will fire all detectable group participant change events (see: [[ParticipantChangedEventModel]])."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'import {\n  create,\n  Client,\n  ParticipantChangedEventModel,\n} from "@open-wa/wa-automate";\n\nfunction start(client: Client) {\n  const groupChatId = "00000000000-11111111111@g.us";\n  client.onParticipantsChanged(\n    groupChatId,\n    async (changeEvent: ParticipantChangedEventModel) => {\n      if (changeEvent.action == "add") {\n        // It is possible that multiple accounts get added\n        await Promise.all(\n          changeEvent.who.map((number) =>\n            client.sendTextWithMentions(\n              groupChatId,\n              `@${number} has been added!`\n            )\n          )\n        );\n      }\n      if (changeEvent.action == "remove") {\n        // It is possible that multiple accounts get removed\n        //remember: all client methods are promises!\n        await Promise.all(\n          changeEvent.who.map((number) =>\n            client.sendTextWithMentions(\n              groupChatId,\n              `@${number} has been removed!`\n            )\n          )\n        );\n      }\n    }\n  );\n}\n\ncreate().then((client) => start(client));\n'})}),"\n",(0,o.jsx)(n.h2,{id:"listening-to-participant-change-events-from-all-groups",children:"Listening to participant change events from all groups"}),"\n",(0,o.jsxs)(n.p,{children:["If you want to listen to participant change requests from all groups, you can get a list of all groups [[getAllChatIds]], filter for groups ",(0,o.jsx)(n.code,{children:".filter(id=>id.includes('@g.us')"})," then use the above method. However this results in multiple listeners in the browser and can have detrimental performance implications."]}),"\n",(0,o.jsx)(n.p,{children:"For better performance and stability you can use the Insiders Feature [[onGlobalParticipantsChanged]]."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'import {\n  create,\n  Client,\n  ParticipantChangedEventModel,\n} from "@open-wa/wa-automate";\n\nfunction start(client: Client) {\n  client.onGlobalParticipantsChanged(\n    async (changeEvent: ParticipantChangedEventModel) => {\n      if (changeEvent.action == "add") {\n        // It is possible that multiple accounts get added\n        await Promise.all(\n          changeEvent.who.map((number) =>\n            client.sendTextWithMentions(\n              changeEvent.chat,\n              `@${number} has been added!`\n            )\n          )\n        );\n      }\n      if (changeEvent.action == "remove") {\n        // It is possible that multiple accounts get removed\n        //remember: all client methods are promises!\n        await Promise.all(\n          changeEvent.who.map((number) =>\n            client.sendTextWithMentions(\n              changeEvent.chat,\n              `@${number} has been removed!`\n            )\n          )\n        );\n      }\n    }\n  );\n}\n\ncreate().then((client) => start(client));\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);